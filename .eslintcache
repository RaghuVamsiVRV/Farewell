[{"E:\\my work\\Farewell\\src\\index.js":"1","E:\\my work\\Farewell\\src\\App.jsx":"2","E:\\my work\\Farewell\\src\\components\\main.js":"3","E:\\my work\\Farewell\\src\\components\\Header.js":"4","E:\\my work\\Farewell\\src\\components\\signup.js":"5","E:\\my work\\Farewell\\src\\components\\editUser.js":"6","E:\\my work\\Farewell\\src\\components\\bubbles.jsx":"7","E:\\my work\\Farewell\\src\\components\\Footer.jsx":"8","E:\\my work\\Farewell\\src\\screens\\profilePage.js":"9","E:\\my work\\Farewell\\src\\screens\\about.jsx":"10"},{"size":895,"mtime":1613544814143,"results":"11","hashOfConfig":"12"},{"size":486,"mtime":1613586573076,"results":"13","hashOfConfig":"12"},{"size":948,"mtime":1613813014387,"results":"14","hashOfConfig":"12"},{"size":6713,"mtime":1613813014357,"results":"15","hashOfConfig":"12"},{"size":12619,"mtime":1613813014411,"results":"16","hashOfConfig":"12"},{"size":10097,"mtime":1613813014360,"results":"17","hashOfConfig":"12"},{"size":6199,"mtime":1613058826179,"results":"18","hashOfConfig":"12"},{"size":328,"mtime":1613469813465,"results":"19","hashOfConfig":"12"},{"size":10638,"mtime":1613813014414,"results":"20","hashOfConfig":"12"},{"size":1219,"mtime":1613544814145,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nxtvle",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\my work\\Farewell\\src\\index.js",[],"E:\\my work\\Farewell\\src\\App.jsx",[],"E:\\my work\\Farewell\\src\\components\\main.js",[],"E:\\my work\\Farewell\\src\\components\\Header.js",["47","48"],"import React, { Component} from 'react';\r\nimport {\r\n\tNav,\r\n\tNavbar,\r\n\tNavbarToggler,\r\n\tCollapse,\r\n\tNavItem,\r\n\tModal,\r\n\tModalHeader,\r\n\tModalBody,\r\n\tForm,\r\n\tFormGroup,\r\n\tLabel,\r\n\tInput,\r\n\tButton,\r\n\tNavbarBrand,\r\n\tButtonGroup\r\n} from 'reactstrap';\r\nimport { NavLink, Link, withRouter} from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport { Alert } from 'reactstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nvar store = require('store');\r\n\r\nconst Msg = ({ text }) => (\r\n\t<div>\r\n\t  {text} \r\n\t</div>\r\n  )\r\nexport const AlertCustom = (props) => {\r\n\tif (props.text !== '') {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Alert color=\"danger\">{props.text}</Alert>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn <div />;\r\n\t}\r\n};\r\nclass Header extends Component {\r\n\r\n\r\n    constructor(props)    \r\n    {\r\n        super(props);\r\n        var isLoggedIn=store.get('loginStatus');\r\n        this.state={\r\n            isNavOpen: false,\r\n            isModalOpen: false,\r\n            user:{},\r\n            passErr:\"\",\r\n            emailErr:\"\",\r\n            loginStatus:isLoggedIn?isLoggedIn.loginStatus:{user:\"\", message:\"logged out\"}\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleLogout = this.handleLogout.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    \r\n    handleChange(event){\r\n        var field = event.target.id\r\n        if(field===\"password\")\r\n            this.setState({passErr:\"\"})\r\n        else if(field===\"username\")\r\n            this.setState({emailErr:\"\"})\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal()\r\n    {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen,\r\n            passErr:\"\",\r\n            emailErr:\"\"\r\n            \r\n        });\r\n    }\r\n\r\n    handleLogin(event){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { \"Content-Type\": \"application/json\", \"Accept\":\"application/json\"},\r\n            credentials:'include',\r\n            body: JSON.stringify({email:this.username.value, password:this.password.value})\r\n        };\r\n        fetch('http://localhost:4000/login', requestOptions)\r\n            .then(response =>{ if(!response.ok){throw response} return response.json()})\r\n            .then(data => {this.setState({loginStatus: data});store.set('loginStatus', {loginStatus:data});toast.dark(({}) => <Msg text={this.state.loginStatus.message}/>);\t\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.props.history.go(0)\r\n\t\t\t}, 500);\r\n            fetch(`http://localhost:4000/users/${this.state.loginStatus.user}`)\r\n            .then(response => response.json())\r\n            .then(data=>{this.setState({user: data});store.set('userDetails', data);store.set('userName',{userName:this.state.user.name});store.set('userID', {userID:this.state.loginStatus.user})});this.toggleModal();this.setState({errors:\"\"})})\r\n            .catch(err =>{\r\n                err.text().then(errMsg=>\r\n                    {\r\n                        var error=JSON.parse(errMsg);\r\n                        this.setState({emailErr: error.errors.email, passErr: error.errors.password})\r\n                    })\r\n            })\r\n        event.preventDefault();\r\n        \r\n    }\r\n    handleLogout(){\r\n\r\n        fetch('http://localhost:4000/logout')\r\n            .then(response => response.json())\r\n            .then(data => {toast.dark(({}) => <Msg text={data.message}/>);Cookies.remove('jwt'); this.setState({loginStatus:{}}); store.clearAll();\r\n\t\t\tsetTimeout(() => {\r\n\t\t\tthis.props.history.push('/home')\r\n\t\t}, 100);})\r\n            \r\n    }\r\n\r\n\t\r\n\trender() {\r\n\t\tfunction Profile({ loginStatus }) {\r\n\t\t\tvar userID = store.get('userID');\r\n\t\t\tif (loginStatus.message === 'logged in') {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<NavLink className=\"nav-link\" to={`/${userID ? userID.userID : loginStatus.user}`}>\r\n\t\t\t\t\t\tProfile\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\treturn <div />;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction Auth({ toggleModal, handleLogout, loginStatus }) {\r\n\t\t\tif (loginStatus.message === 'logged in') {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Button outline onClick={handleLogout} size=\"sm\">\r\n\t\t\t\t\t\t\t<span className=\"fa fa-sign-in fa-lg\"> Logout</span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Button outline onClick={toggleModal} size=\"sm\">\r\n\t\t\t\t\t\t\t<span className=\"fa fa-sign-in fa-lg\"> Login</span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Navbar dark expand=\"md\">\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<NavbarToggler onClick={this.toggleNav} />\r\n\t\t\t\t\t\t<NavbarBrand className=\"mr-auto\" href=\"/\"><div className=\"title\">Al-Vida</div></NavbarBrand>\r\n\t\t\t\t\t\t<Collapse isOpen={this.state.isNavOpen} navbar>\r\n\t\t\t\t\t\t\t<Nav navbar>\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t\t<Profile loginStatus={this.state.loginStatus} />\r\n\t\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t</Collapse>\r\n\t\t\t\t\t\t<Nav className=\"ml-auto\" navbar>\r\n\t\t\t\t\t\t\t<NavItem>\r\n\t\t\t\t\t\t\t\t<Auth\r\n\t\t\t\t\t\t\t\t\ttoggleModal={this.toggleModal}\r\n\t\t\t\t\t\t\t\t\thandleLogout={this.handleLogout}\r\n\t\t\t\t\t\t\t\t\tloginStatus={this.state.loginStatus}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</NavItem>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Navbar>\r\n\t\t\t\t\r\n\t\t\t\t<Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n\t\t\t\t\t<ModalHeader className=\"bg-primary text-white\"  toggle={this.toggleModal}>Login</ModalHeader>\r\n\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t<Form onSubmit={this.handleLogin}>\r\n\t\t\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t\t\t<Label htmlFor=\"username\">Webmail</Label>\r\n\t\t\t\t\t\t\t\t\t<Input onChange={this.handleChange} type=\"text\" id=\"username\" name=\"username\" innerRef={(input)=>this.username=input}/>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t\t\t<AlertCustom text={this.state.emailErr}/>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t\t\t<Label htmlFor=\"password\">Password</Label>\r\n\t\t\t\t\t\t\t\t\t<Input onChange={this.handleChange} type=\"password\" id=\"password\" name=\"password\" innerRef={(input)=>this.password=input}/>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t\t\t<AlertCustom text={this.state.passErr}/>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t\t<ButtonGroup>\r\n\t\t\t\t\t\t\t<Button type=\"submit\" value=\"submit\" color=\"dark\" outline>Login</Button>\r\n\t\t\t\t\t\t\t<Button color=\"link\"  onClick={this.toggleModal}>\r\n\t\t\t\t\t\t\t\t <Link className=\"text-secondary\" to=\"/signup\">Signup</Link>\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</ModalBody>\r\n\t\t\t\t</Modal>            \r\n\t\t\t<ToastContainer position=\"bottom-right\"/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(Header);\r\n","E:\\my work\\Farewell\\src\\components\\signup.js",["49","50","51","52","53","54"],"import React, {Component} from \"react\";\r\nimport {Button, Label, Col, Row} from \"reactstrap\";\r\nimport { Control, LocalForm, Errors } from \"react-redux-form\";\r\nimport ImageUploader from 'react-images-upload';\r\nimport { Alert } from \"reactstrap\";\r\nimport { toast } from \"react-toastify\";\r\nexport const AlertCustom = (props) => {    \r\n    if(props.text!==\"\"){\r\n        return (\r\n        <div>\r\n            <Alert color=\"danger\">\r\n                *{props.text}\r\n            </Alert>\r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n        return(\r\n            <div/>\r\n        )\r\n    }\r\n  }\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length<=len);\r\nconst minLength = (len) => (val) => (val) && (val.length>=len);\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@iitp\\.ac\\.in$/i.test(val);\r\nconst passMatch = (Val) => (val) => (val) && (Val) && (val===Val);\r\n\r\nclass Signup extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            input:\"\",\r\n            user:{},\r\n            errors:\"\",\r\n            pictures:null\r\n        };\r\n        this.onDrop = this.onDrop.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);  \r\n        this.handleChange = this.handleChange.bind(this);      \r\n    }\r\n\r\n    handleChange(event){\r\n        let input=this.state.input;\r\n        input=event.target.value;\r\n        this.setState({\r\n            input:input,\r\n            errors:\"\"\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.setState({errors:\"\"})\r\n        var data = new FormData();\r\n        for(var value of Object.entries(values)){\r\n            data.append(value[0], value[1])\r\n        }\r\n        if(this.state.pictures!=null) data.append('file', this.state.pictures[0])\r\n        else data.append('file', null)\r\n        data.append('college', \"IIT PATNA\")\r\n        data.append('size',Math.floor(Math.random() * (50 - 30 + 1) + 30))\r\n         \r\n        const requestOptions = {\r\n            method: 'POST',\r\n            body: data \r\n        };\r\n        fetch('http://localhost:4000/signup', requestOptions)\r\n            .then(response => {if(!response.ok){throw response} response.json()})\r\n            .then(data => {this.setState({user: data});toast.info(\"Verify your account via registered email\");\r\n            // setTimeout(() => {\r\n            //     this.props.history.push('/bubbles')\r\n            // }, 500);    \r\n        })\r\n            .catch(err =>{\r\n                err.text().then(errMsg=>\r\n                    {\r\n                        var error=JSON.parse(errMsg);\r\n                        this.setState({errors: error.error})\r\n                    })\r\n            })\r\n\r\n    }\r\n\r\n    onDrop(picture) {\r\n        this.setState({\r\n            pictures: picture\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <LocalForm onSubmit={(values)=>this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                            <Label htmlFor=\"name\" md={3}>Name <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\r\n                                        placeholder=\"Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".name\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'This is a required field, ',\r\n                                            minLength: 'Must be greater than 2 characters, ',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={3}>Webmail <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Webmail\"\r\n                                        className=\"form-control\"\r\n                                        onChange={this.handleChange}\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'This is a required field, ',\r\n                                            validEmail: 'Enter college webmail',\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col className=\"ml-auto\" md={9}>\r\n                                    <AlertCustom text={this.state.errors}/>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"password\" md={3}>Password <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                    <Control.text type=\"password\" model=\".password\" id=\"password\" name=\"password\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Password\"\r\n                                    onChange={this.handleChange}\r\n                                    validators={{\r\n                                        required, minLength: minLength(8)\r\n                                    }}/>\r\n                                    <Errors \r\n                                    className=\"text-danger\"\r\n                                    model=\".password\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'This is a required field, ',\r\n                                        minLength: 'Enter min 8 characters'\r\n                                    }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"re_password\" md={3}>Re-enter password <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                    <Control.text type=\"password\" model=\".re_password\" id=\"re_password\" name=\"re_password\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Password\"\r\n                                    validators={{\r\n                                        required, passMatch: passMatch(this.state.input)\r\n                                    }}/>\r\n                                    <Errors \r\n                                    className=\"text-danger\"\r\n                                    model=\".re_password\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'This is a required field, ',\r\n                                        passMatch: 'Passwords should match'\r\n                                    }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"branch\" md={3}>Branch <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                    <Control.select model=\".branch\" name =\"branch\" id=\"branch\" className=\"form-control\"\r\n                                    validators={{\r\n                                        required\r\n                                    }}>\r\n                                        <option/>\r\n                                        <option value=\"CS\">CS</option>\r\n                                        <option value=\"EE\">EE</option>\r\n                                        <option value=\"ME\">ME</option>\r\n                                        <option value=\"CE\">CE</option>\r\n                                        <option value=\"CB\">CB</option>\r\n                                    </Control.select>\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".branch\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'This is a required field'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"batch\" md={3}>Batch <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                <Control.select model=\".batch\" name =\"batch\" id=\"batch\" className=\"form-control\"\r\n                                validators={{required}}>\r\n                                    <option/>\r\n                                    <option value='2016'>2016</option>\r\n                                    <option value='2017'>2017</option>\r\n                                    <option value=\"2018\">2018</option>\r\n                                </Control.select> \r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".batch\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        required: 'This is a required field'\r\n                                    }}\r\n                                />      \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"image\" md={3}>Profile Photo <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                    <ImageUploader\r\n                                        withIcon={false}\r\n                                        buttonText='Choose image'\r\n                                        onChange={this.onDrop}\r\n                                        label=\"Max file size: 0.5mb, accepted: jpg\"\r\n                                        imgExtension={['.jpg']}\r\n                                        maxFileSize={524280}\r\n                                        singleImage={true}\r\n                                        withPreview={true}\r\n                                    />               \r\n                                </Col>\r\n                            </Row>                    \r\n                            <Row className=\"form-group\">\r\n                                <Button className=\"ml-2\" type=\"submit\" value=\"submit\" color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;\r\n",["55","56"],"E:\\my work\\Farewell\\src\\components\\editUser.js",["57","58","59","60","61"],"import React, {Component} from \"react\";\r\nimport {Button, Label, Col, Row} from \"reactstrap\";\r\nimport { Control, LocalForm, Errors } from \"react-redux-form\";\r\nimport ImageUploader from 'react-images-upload';\r\nimport { Alert } from \"reactstrap\";\r\nimport { toast } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nvar store = require('store');\r\n\r\nexport const AlertCustom = (props) => {  \r\n\r\n    if(props.text!==\"\"){\r\n        return (\r\n        <div>\r\n            <Alert color=\"danger\">\r\n                *{props.text}\r\n            </Alert>\r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n        return(\r\n            <div/>\r\n        )\r\n    }\r\n  }\r\n\r\n\r\n\r\nconst maxLength = (len) => (val) => !(val) || (val.length<=len);\r\nconst minLength = (len) => (val) => !(val) || (val?val.length>=len:false);\r\nconst passMatch = (Val) => (val) => (Val)?((val) && (Val) && (val===Val)):true;\r\n\r\nclass Signup extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            input:\"\",\r\n            user:{},\r\n            errors:\"\",\r\n            pictures:null, \r\n        };\r\n        this.onDrop = this.onDrop.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);  \r\n        this.handleChange = this.handleChange.bind(this);      \r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        let userDetails=store.get('userDetails');\r\n        console.log(typeof userDetails.name)\r\n        setTimeout(()=>{\r\n            document.getElementById('name').value=userDetails.name;\r\n            document.getElementById('branch').value=userDetails.branch;\r\n            document.getElementById('batch').value=userDetails.batch;\r\n        })\r\n    }\r\n    handleChange(event){\r\n        let input=this.state.input;\r\n        input=event.target.value;\r\n        this.setState({\r\n            input:input,\r\n            errors:\"\"\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.setState({errors:\"\"})\r\n        var data = new FormData();\r\n        for(var value of Object.entries(values)){\r\n            data.append(value[0], value[1])\r\n        }\r\n        if(this.state.pictures!=null) data.append('file', this.state.pictures[0])\r\n        else data.append('file', null)\r\n         \r\n        const requestOptions = {\r\n            method: 'POST',\r\n            credentials:'include',\r\n            body: data \r\n        };\r\n        fetch('http://localhost:4000/api/edit', requestOptions)\r\n            .then(response => {if(!response.ok){throw response} response.json()})\r\n            .then((data)=>{console.log(data);toast.success(\"Profile Updated\");\r\n            setTimeout(() => {\r\n                this.props.history.goBack();\r\n            }, 500);\r\n            fetch(`http://localhost:4000/users/${store.get('userDetails')._id}`)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => store.set('userDetails', data));\r\n        }\r\n                \r\n            )\r\n            .catch(err =>{\r\n                err.text().then(errMsg=>\r\n                    {\r\n                        var error=JSON.parse(errMsg);\r\n                        toast.error(error.error)\r\n                    })\r\n            })\r\n\r\n    }\r\n\r\n    onDrop(picture) {\r\n        this.setState({\r\n            pictures: picture\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <LocalForm onSubmit={(values)=>this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                            <Label htmlFor=\"name\" md={3}>Name</Label>\r\n                                <Col md={9}>\r\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\r\n                                        placeholder=\"Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".name\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: 'Must be greater than 2 characters, ',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                           \r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"password\" md={3}>New-Password</Label>\r\n                                <Col md={9}>\r\n                                    <Control.text type=\"password\" model=\".password\" id=\"password\" name=\"password\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Password\"\r\n                                    onChange={this.handleChange}\r\n                                    validators={{\r\n                                         minLength: minLength(8)\r\n                                    }}/>\r\n                                    <Errors \r\n                                    className=\"text-danger\"\r\n                                    model=\".password\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        minLength: 'Enter min 8 characters'\r\n                                    }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"re_password\" md={3}>Re-enter password</Label>\r\n                                <Col md={9}>\r\n                                    <Control.text type=\"password\" model=\".re_password\" id=\"re_password\" name=\"re_password\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Password\"\r\n                                    validators={{\r\n                                        passMatch: passMatch(this.state.input)\r\n                                    }}/>\r\n                                    <Errors \r\n                                    className=\"text-danger\"\r\n                                    model=\".re_password\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        passMatch: 'Passwords should match'\r\n                                    }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"branch\" md={3}>Branch</Label>\r\n                                <Col md={9}>\r\n                                    <Control.select model=\".branch\" name =\"branch\" id=\"branch\" className=\"form-control\"\r\n                                    >\r\n                                        <option/>\r\n                                        <option value=\"CS\">CS</option>\r\n                                        <option value=\"EE\">EE</option>\r\n                                        <option value=\"ME\">ME</option>\r\n                                        <option value=\"CE\">CE</option>\r\n                                        <option value=\"CB\">CB</option>\r\n                                    </Control.select>\r\n                                   \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"batch\" md={3}>Batch</Label>\r\n                                <Col md={9}>\r\n                                <Control.select model=\".batch\" name =\"batch\" id=\"batch\" className=\"form-control\">\r\n                                    <option/>\r\n                                    <option value='2016'>2016</option>\r\n                                    <option value='2017'>2017</option>\r\n                                    <option value=\"2018\">2018</option>\r\n                                </Control.select> \r\n                                \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"image\" md={3}>Profile Photo <span className=\"text-danger\">*</span></Label>\r\n                                <Col md={9}>\r\n                                    <ImageUploader\r\n                                        withIcon={false}\r\n                                        buttonText='Choose image'\r\n                                        onChange={this.onDrop}\r\n                                        label=\"Max file size: 0.5mb, accepted: jpg\"\r\n                                        imgExtension={['.jpg']}\r\n                                        maxFileSize={524280}\r\n                                        singleImage={true}\r\n                                        withPreview={true}\r\n                                    />               \r\n                                </Col>\r\n                            </Row>                       \r\n                            <Row className=\"form-group\">\r\n                                <Button className=\"ml-2\" type=\"submit\" value=\"submit\" color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;\r\n","E:\\my work\\Farewell\\src\\components\\bubbles.jsx",["62","63","64","65","66","67","68","69"],"E:\\my work\\Farewell\\src\\components\\Footer.jsx",["70","71"],"E:\\my work\\Farewell\\src\\screens\\profilePage.js",["72","73","74"],"import React, { Component, useState } from 'react';\r\nimport { Control, LocalForm } from 'react-redux-form';\r\nimport { Button, Row, Col, Card, CardTitle, CardSubtitle, CardText, CardBody, ButtonGroup } from 'reactstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nvar store = require('store');\r\n\r\nconst Undo = ({text, data, onDelete, receiverName}) => {\r\n\tconst dismiss = () =>  toast.dismiss(\"Undo\");\r\n\tlet userDetails=store.get('userDetails')\r\n\tconst handleUndo = () => {\r\n\t\tconst requestOptions = {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tcredentials: 'include',\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tto: data.to,\r\n\t\t\t\tsenderName: data.senderName,\r\n\t\t\t\tcomment: data.comment, \r\n\t\t\t\tsenderBranch: userDetails.branch,\r\n\t\t\t\tsenderBatch: userDetails.batch,\r\n\t\t\t\tsenderCollege: userDetails.college, \r\n\t\t\t\treceiverName : receiverName\r\n\t\t\t})\r\n\t\t};\r\n\t\tfetch('http://localhost:4000/api/add_comment', requestOptions)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then(() => {onDelete(); dismiss()});\r\n\r\n\t}\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{text} \r\n\t\t\t<Button color =\"link\" className=\"text-success\" onClick={handleUndo} size=\"sm\">Undo</Button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction AddComment({show}){\r\n\tif(show===true){\r\n\t\treturn(\r\n\t\t\t<Row className=\"form-group\">\r\n\t\t\t\t<Col md={12} style={{\r\n\t\t\t\tmargin: 10,\r\n\t\t\t}}>\r\n\t\t\t\t\t<Control.textarea\r\n\t\t\t\t\t\tmodel=\".comment\"\r\n\t\t\t\t\t\tid=\"comment\"\r\n\t\t\t\t\t\tname=\"comment\"\r\n\t\t\t\t\t\trows={3}\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\r\n\t\t\t\t<Button outline type=\"submit\">\r\n\t\t\t\t\t<span className=\"fa fa-pencil\"/> Submit Comment\r\n\t\t\t\t</Button>\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t)\r\n\t}\r\n\telse{\r\n\t\treturn(<div/>)\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nfunction RenderComment2({ type, comment, onDelete, id, show}) {\r\n\tvar [isFlipped, Flip] = useState(true);\r\n\tif(show===\"1\")\r\n\t{\r\n\t\tisFlipped=false\r\n\t}\r\n\tconst handleDelete = () => {\r\n\t\tfetch(`http://localhost:4000/api/delete_comment/${comment._id}`, {method:\"DELETE\", credentials:'include', headers: { \"Content-Type\": \"application/json\", \"Accept\":\"application/json\"}})\r\n\t\t.then((response)=>{if(!response.ok){throw response} return response.json()})\r\n\t\t.then((data)=> {toast.dark(({})=><Undo text=\"Comment deleted\" data={data} onDelete={onDelete} receiverName={comment.receiverName}/>, {toastId:\"Undo\"});onDelete()})\r\n\t\t.catch(err =>{\r\n\t\t\terr.text().then(errMsg=>\r\n\t\t\t\t{\r\n\t\t\t\t\tvar error=JSON.parse(errMsg);\r\n\t\t\t\t\ttoast.error(error.error, {toastId:\"error\"})\r\n\t\t\t\t})\r\n\t\t})\r\n\t  }\r\n\tif(show===\"2\"){\r\n\t\tsetTimeout(function(){\r\n\t\t\tFlip(id!==comment.from)\r\n\t\t}, 200);\r\n\t}\r\n\telse { \r\n\t\tsetTimeout(function(){\r\n\t\t\tFlip(false)\r\n\t\t}, 200);\r\n\t}\r\n\t\r\n\tconst Receiver = () =>{\r\n\t\tif(type===\"x\"){\r\n\t\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\tto: <Link className=\"text-secondary\">{comment.receiverName}</Link>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t\t\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{comment.senderBranch}{','}{comment.senderBatch}\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">\r\n\t\t\t<div key=\"front\">\r\n\t\t\t\t<Card\r\n\t\t\t\t\tkey={comment._id}\r\n\t\t\t\t\tbody\r\n\t\t\t\t\tinverse\r\n\t\t\t\t\tclassName=\"p-3\"\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: \"#fff\",\r\n\t\t\t\t\t\tborderBottomColor: '#000',\r\n\t\t\t\t\t\tborderBottomWidth: \"4px\",\r\n\t\t\t\t\t\tborderRightColor: '#000',\r\n\t\t\t\t\t\tborderRightWidth: \"2px\",\r\n\t\t\t\t\t\tborderTopColor: '#000',\r\n\t\t\t\t\t\tborderTopWidth: \"1px\",\r\n\t\t\t\t\t\tborderLeftColor: '#000',\r\n\t\t\t\t\t\tborderLeftWidth: \"1px\",\r\n\t\t\t\t\t\tpadding: '10px',\r\n\t\t\t\t\t\tmargin: 10\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<CardTitle md={10} style={{fontFamily: 'Varela Round',color: \"#000\", fontSize: \"16px\", textAlign:'left'}} tag=\"h5\"><Link className=\"text-secondary\" to={`/${comment.from}`}>{comment.senderName}</Link> <Button  style={{position:\"absolute\", top:\"10px\", right:\"5px\"}} color=\"link\" className=\"text-danger\" size=\"sm\" onClick={()=>handleDelete(comment._id)}><DeleteOutlinedIcon fontSize=\"small\" /> </Button></CardTitle>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<CardSubtitle style={{color: \"#000\",fontSize: \"12px\", textAlign:'left'}} tag=\"h5\"><Receiver/></CardSubtitle>\r\n\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t<CardText style={{fontFamily: 'Architects Daughter' , color: \"#000\"}}>{comment.comment}</CardText>\r\n\t\t\t\t\t\t<CardText style={{color: \"#000\" , fontSize:\"12px\", position: 'absolute', bottom:'0', right:'0', margin: '8px'}} className=\"ml-auto mr-3\">\r\n\t\t\t\t\t\t\t--{' '}\r\n\t\t\t\t\t\t\t{new Intl.DateTimeFormat('en-US', {\r\n\t\t\t\t\t\t\t\tday: '2-digit',\r\n\t\t\t\t\t\t\t\tmonth: 'short',\r\n\t\t\t\t\t\t\t\tyear: 'numeric'\r\n\t\t\t\t\t\t\t}).format(new Date(comment.time))}\r\n\t\t\t\t\t\t</CardText>\r\n\t\t\t\t\t</CardBody>\r\n\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div key=\"back\">\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={comment._id}\r\n\t\t\t\t\t\tbody\r\n\t\t\t\t\t\tinverse\r\n\t\t\t\t\t\tclassName=\"p-3\"\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tbackgroundColor:\" #fff\",\r\n\t\t\t\t\t\t\tborderBottomColor: '#000',\r\n\t\t\t\t\t\t\tborderBottomWidth: \"4px\",\r\n\t\t\t\t\t\t\tborderRightColor: '#000',\r\n\t\t\t\t\t\t\tborderRightWidth: \"2px\",\r\n\t\t\t\t\t\t\tborderTopColor: '#000',\r\n\t\t\t\t\t\t\tborderTopWidth: \"1px\",\r\n\t\t\t\t\t\t\tborderLeftColor: '#000',\r\n\t\t\t\t\t\t\tborderLeftWidth: \"1px\",\r\n\t\t\t\t\t\t\tpadding: '10px',\r\n\t\t\t\t\t\t\tmargin: 10\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CardTitle><br/></CardTitle>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<CardBody><br/></CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t</ReactCardFlip>\r\n\t\t\r\n\t);\r\n}\r\n\r\nclass ProfilePage extends Component {\r\n\tconstructor(props) {\r\n\t\tlet userID=store.get('userID');\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcomments: [],\r\n\t\t\tuser: {},\r\n\t\t\turl: {}, \r\n\t\t\tisOpen:false, \r\n\t\t\tshowComment:userID?userID.userID!==this.props.id:true, \r\n\t\t\ttext:\"\",\r\n\t\t\tcommentsType:\"0\",\r\n\t\t\tmyComments:[]\r\n\t\t};\r\n\t\tthis.handleDelete = this.handleDelete.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.toggleAlert = this.toggleAlert.bind(this);\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleMyComments = this.handleMyComments.bind(this);\r\n\t}\r\n\thandleDelete(){\r\n\t\tfetch(`http://localhost:4000/get_comments?to=${this.props.id}`)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => this.setState({ comments: data.comments , commentsType:\"1\"}));\r\n\t\tfetch('http://localhost:4000/api/my_comments', {credentials:'include'})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {this.setState({ myComments: data.comments, commentsType:\"1\" }); console.log(data)});\t\t\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch(`http://localhost:4000/users/${this.props.id}`)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {this.setState({ user: data }); console.log(this.state.user)});\r\n\t\t\t\r\n\r\n\t\tfetch(`http://localhost:4000/get_comments?to=${this.props.id}`)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => this.setState({ comments: data.comments }));\r\n\r\n\t\tfetch('http://localhost:4000/api/my_comments', {credentials:'include'})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {this.setState({ myComments: data.comments }); });\t\r\n\t}\r\n\thandleMyComments(){\r\n\t\tthis.setState({commentsType:\"3\"})\r\n\t}\r\n\thandleChange(){\r\n\t\tthis.setState({isOpen:false})\r\n\t}\r\n\thandleSubmit(values, event) {\r\n\t\tevent.preventDefault();\r\n\t\tthis.setState({text:\"\", commentsType:\"1\"})\r\n\t\tlet userDetails=store.get('userDetails')\r\n\t\tif(userDetails != null){\r\n\t\t\tif (values.comment) {\r\n\t\t\t\tconst requestOptions = {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\t\tcredentials: 'include',\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\tto: this.state.user._id,\r\n\t\t\t\t\t\tsenderName: userDetails.name,\r\n\t\t\t\t\t\tcomment: values.comment, \r\n\t\t\t\t\t\tsenderBranch: userDetails.branch,\r\n\t\t\t\t\t\tsenderBatch: userDetails.batch,\r\n\t\t\t\t\t\tsenderCollege: userDetails.college,\r\n\t\t\t\t\t\treceiverName: this.state.user.name\r\n\t\t\t\t\t})\r\n\t\t\t\t};\r\n\t\t\t\tfetch('http://localhost:4000/api/add_comment', requestOptions)\r\n\t\t\t\t\t.then((response) => response.json())\r\n\t\t\t\t\t.then((data) => {this.setState({ comments: [ ...this.state.comments, data ], commentsType:\"1\",}); document.getElementById('comment').value='';});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttoast.dark(\"Enter Comment\")\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttoast.error(\"Please Login\")\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\ttoggleAlert(){\r\n\t\tthis.setState({isOpen:false})\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tvar userID=store.get('userID')\r\n\t\tconst dispComment  = this.state.comments.map((comment) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<RenderComment2 type=\"y\" comment={comment} onDelete={this.handleDelete} id={userID?userID.userID:\"\"}  show={this.state.commentsType} />\r\n\t\t\t\t</Col>\r\n\t\t\t);\r\n\t\t});\r\n\t\tconst dispComment2 = this.state.myComments?this.state.myComments.map((comment) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Col md={6}>\r\n\t\t\t\t\t<RenderComment2 type=\"x\"  comment={comment} onDelete={this.handleDelete} id={userID?userID.userID:\"\"}  show={this.state.commentsType} />\r\n\t\t\t\t</Col>\r\n\t\t\t);\r\n\t\t}): ()=>{return(<div/>)}\r\n\t\tconst DispComment = ({id}) =>{\r\n\t\t\tif(id===\"3\"){\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Row>{dispComment2}</Row>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Row>{dispComment}</Row>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst CommentNav = ({handleMyComments}) =>{\r\n\t\t\tif(store.get('userDetails')&&store.get('userDetails')._id===this.props.id){\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<ButtonGroup>\r\n\t\t\t\t\t\t<Button onClick={()=>{this.setState({commentsType:\"0\"});}}>\r\n\t\t\t\t\t\t\tAll Comments\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button onClick={handleMyComments}>\r\n\t\t\t\t\t\t\tMy Comments\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div/>\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst DispEdit = ({show}) =>{\r\n\t\t\tif(show){\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Link to=\"/editUser\" style={{position:\"relative\", left:\"-2em\", top:\"3em\", textDecoration:\"none\"}}> \r\n\t\t\t\t\t\t<Fab color=\"default\" size=\"small\" aria-label=\"edit\"><EditIcon /></Fab>\r\n\t\t\t\t\t</Link>\t\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn <div/>\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"lcontainer\">\r\n\t\t\t\t<div className=\"container-banner\">\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={'/photos/' + this.state.user.imageURL}\r\n\t\t\t\t\t\talt=\"Avatar\"\r\n\t\t\t\t\t\theight=\"170\"\r\n\t\t\t\t\t\twidth=\"170\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<DispEdit show={store.get('userDetails')?this.state.user._id===store.get('userDetails')._id:false}/>\r\n\t\t\t\t\t<h2 className=\"Tname\"> {this.state.user.name} </h2>\r\n\t\t\t\t\t<h5 className=\"Tname1\"> {this.state.user.branch}{', '}{this.state.user.batch}</h5>\t\t\r\n\t\t\t\t\t<CommentNav handleMyComments={this.handleMyComments}/>\r\n\t\t\t\t\t<DispComment id={this.state.commentsType} />\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"container-banner\">\r\n\t\t\t\t\t<LocalForm onSubmit={this.handleSubmit} >\t\r\n\t\t\t\t\t\t<AddComment show={this.state.showComment}/>\t\t\t\r\n\t\t\t\t\t</LocalForm>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default withRouter(ProfilePage);\r\n","E:\\my work\\Farewell\\src\\screens\\about.jsx",[],{"ruleId":"75","severity":1,"message":"76","line":98,"column":120,"nodeType":"77","messageId":"78","endLine":98,"endColumn":122},{"ruleId":"75","severity":1,"message":"76","line":115,"column":40,"nodeType":"77","messageId":"78","endLine":115,"endColumn":42},{"ruleId":"79","severity":1,"message":"80","line":97,"column":37,"nodeType":"81","endLine":103,"endColumn":44},{"ruleId":"79","severity":1,"message":"80","line":119,"column":37,"nodeType":"81","endLine":126,"endColumn":44},{"ruleId":"79","severity":1,"message":"80","line":146,"column":37,"nodeType":"81","endLine":152,"endColumn":41},{"ruleId":"79","severity":1,"message":"80","line":167,"column":37,"nodeType":"81","endLine":172,"endColumn":41},{"ruleId":"79","severity":1,"message":"82","line":187,"column":37,"nodeType":"81","endLine":190,"endColumn":40},{"ruleId":"79","severity":1,"message":"82","line":211,"column":33,"nodeType":"81","endLine":212,"endColumn":57},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"79","severity":1,"message":"80","line":98,"column":37,"nodeType":"81","endLine":104,"endColumn":44},{"ruleId":"79","severity":1,"message":"80","line":120,"column":37,"nodeType":"81","endLine":126,"endColumn":41},{"ruleId":"79","severity":1,"message":"80","line":140,"column":37,"nodeType":"81","endLine":145,"endColumn":41},{"ruleId":"79","severity":1,"message":"82","line":159,"column":37,"nodeType":"81","endLine":160,"endColumn":38},{"ruleId":"79","severity":1,"message":"82","line":174,"column":33,"nodeType":"81","endLine":174,"endColumn":114},{"ruleId":"87","severity":1,"message":"88","line":2,"column":18,"nodeType":"89","messageId":"90","endLine":2,"endColumn":29},{"ruleId":"87","severity":1,"message":"91","line":3,"column":28,"nodeType":"89","messageId":"90","endLine":3,"endColumn":36},{"ruleId":"87","severity":1,"message":"92","line":3,"column":38,"nodeType":"89","messageId":"90","endLine":3,"endColumn":47},{"ruleId":"87","severity":1,"message":"93","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"94","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":13},{"ruleId":"87","severity":1,"message":"95","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":13},{"ruleId":"96","severity":1,"message":"97","line":85,"column":44,"nodeType":"98","messageId":"99","endLine":85,"endColumn":45},{"ruleId":"96","severity":1,"message":"97","line":119,"column":44,"nodeType":"98","messageId":"99","endLine":119,"endColumn":45},{"ruleId":"100","severity":1,"message":"101","line":4,"column":1,"nodeType":"102","endLine":14,"endColumn":2},{"ruleId":"103","severity":1,"message":"104","line":9,"column":6,"nodeType":"81","endLine":9,"endColumn":82},{"ruleId":"87","severity":1,"message":"92","line":1,"column":28,"nodeType":"89","messageId":"90","endLine":1,"endColumn":37},{"ruleId":"79","severity":1,"message":"105","line":50,"column":6,"nodeType":"81","endLine":56,"endColumn":8},{"ruleId":"75","severity":1,"message":"76","line":86,"column":31,"nodeType":"77","messageId":"78","endLine":86,"endColumn":33},"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'ButtonGroup' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'axios' is defined but never used.","'photo' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]
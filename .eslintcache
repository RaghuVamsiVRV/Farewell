[{"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/index.js":"1","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/App.jsx":"2","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/main.js":"3","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/Header.js":"4","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/signup.js":"5","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/Footer.jsx":"6","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/editUser.js":"7","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/screens/about.jsx":"8","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/bubbles.jsx":"9","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/screens/profilePage.js":"10"},{"size":867,"mtime":1613471556095,"results":"11","hashOfConfig":"12"},{"size":463,"mtime":1613557690314,"results":"13","hashOfConfig":"12"},{"size":913,"mtime":1613930070621,"results":"14","hashOfConfig":"12"},{"size":6486,"mtime":1613930070621,"results":"15","hashOfConfig":"12"},{"size":12383,"mtime":1613930070621,"results":"16","hashOfConfig":"12"},{"size":314,"mtime":1613464022382,"results":"17","hashOfConfig":"12"},{"size":9871,"mtime":1613930070621,"results":"18","hashOfConfig":"12"},{"size":1172,"mtime":1613545059399,"results":"19","hashOfConfig":"12"},{"size":5722,"mtime":1613930070621,"results":"20","hashOfConfig":"12"},{"size":10249,"mtime":1613930472524,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mzx6ej",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/index.js",[],"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/App.jsx",[],"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/main.js",[],"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/Header.js",["47","48","49"],"import React, { Component} from 'react';\nimport {\n\tNav,\n\tNavbar,\n\tNavbarToggler,\n\tCollapse,\n\tNavItem,\n\tModal,\n\tModalHeader,\n\tModalBody,\n\tForm,\n\tFormGroup,\n\tLabel,\n\tInput,\n\tButton,\n\tNavbarBrand,\n\tButtonGroup\n} from 'reactstrap';\nimport { NavLink, Link, withRouter} from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport { Alert } from 'reactstrap';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst uri = process.env.REACT_APP_URL;\n\nvar store = require('store');\n\nconst Msg = ({ text }) => (\n\t<div>\n\t  {text} \n\t</div>\n  )\nexport const AlertCustom = (props) => {\n\tif (props.text !== '') {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Alert color=\"danger\">{props.text}</Alert>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn <div />;\n\t}\n};\nclass Header extends Component {\n\n\n    constructor(props)    \n    {\n        super(props);\n        var isLoggedIn=store.get('loginStatus');\n        this.state={\n            isNavOpen: false,\n            isModalOpen: false,\n            user:{},\n            passErr:\"\",\n            emailErr:\"\",\n            loginStatus:isLoggedIn?isLoggedIn.loginStatus:{user:\"\", message:\"logged out\"}\n        };\n        this.toggleNav = this.toggleNav.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleLogout = this.handleLogout.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    \n    handleChange(event){\n        var field = event.target.id\n        if(field===\"password\")\n            this.setState({passErr:\"\"})\n        else if(field===\"username\")\n            this.setState({emailErr:\"\"})\n    }\n\n    toggleNav(){\n        this.setState({\n            isNavOpen: !this.state.isNavOpen\n        });\n    }\n\n    toggleModal()\n    {\n        this.setState({\n            isModalOpen: !this.state.isModalOpen,\n            passErr:\"\",\n            emailErr:\"\"\n            \n        });\n    }\n\n    handleLogin(event){\n        const requestOptions = {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\", \"Accept\":\"application/json\"},\n            credentials:'include',\n            body: JSON.stringify({email:this.username.value, password:this.password.value})\n        };\n        fetch(uri+'/login', requestOptions)\n            .then(response =>{ if(!response.ok){throw response} return response.json()})\n            .then(data => {this.setState({loginStatus: data});store.set('loginStatus', {loginStatus:data});toast.dark(({}) => <Msg text={this.state.loginStatus.message}/>);\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.props.history.go(0)\n\t\t\t}, 500);\n            fetch(uri+`/users/${this.state.loginStatus.user}`)\n            .then(response => response.json())\n            .then(data=>{this.setState({user: data});store.set('userDetails', data);store.set('userName',{userName:this.state.user.name});store.set('userID', {userID:this.state.loginStatus.user})});this.toggleModal();this.setState({errors:\"\"})})\n            .catch(err =>{\n                err.text().then(errMsg=>\n                    {\n                        var error=JSON.parse(errMsg);\n                        this.setState({emailErr: error.errors.email, passErr: error.errors.password})\n                    })\n            })\n        event.preventDefault();\n        \n    }\n    handleLogout(){\n\n        fetch(uri+'/logout')\n            .then(response => response.json())\n            .then(data => {toast.dark(({}) => <Msg text={data.message}/>);Cookies.remove('jwt'); this.setState({loginStatus:{}}); store.clearAll();\n\t\t\tsetTimeout(() => {\n\t\t\tthis.props.history.push('/home')\n\t\t}, 100);})\n            \n    }\n\n\t\n\trender() {\n\t\tfunction Profile({ loginStatus }) {\n\t\t\tvar userID = store.get('userID');\n\t\t\tif (loginStatus.message === 'logged in') {\n\t\t\t\treturn (\n\t\t\t\t\t<NavLink className=\"nav-link\" to={`/${userID ? userID.userID : loginStatus.user}`}>\n\t\t\t\t\t\tProfile\n\t\t\t\t\t</NavLink>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn <div />;\n\t\t\t}\n\t\t}\n\t\tfunction Auth({ toggleModal, handleLogout, loginStatus }) {\n\t\t\tif (loginStatus.message === 'logged in') {\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button outline onClick={handleLogout} size=\"sm\">\n\t\t\t\t\t\t\t<span className=\"fa fa-sign-in fa-lg\"> Logout</span>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button outline onClick={toggleModal} size=\"sm\">\n\t\t\t\t\t\t\t<span className=\"fa fa-sign-in fa-lg\"> Login</span>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Navbar dark expand=\"md\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<NavbarToggler onClick={this.toggleNav} />\n\t\t\t\t\t\t<NavbarBrand className=\"mr-auto\" href=\"/\"><div className=\"title\">Al-Vida</div></NavbarBrand>\n\t\t\t\t\t\t<Collapse isOpen={this.state.isNavOpen} navbar>\n\t\t\t\t\t\t\t<Nav navbar>\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t\t\t\t<Profile loginStatus={this.state.loginStatus} />\n\t\t\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t</Collapse>\n\t\t\t\t\t\t<Nav className=\"ml-auto\" navbar>\n\t\t\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t\t\t<Auth\n\t\t\t\t\t\t\t\t\ttoggleModal={this.toggleModal}\n\t\t\t\t\t\t\t\t\thandleLogout={this.handleLogout}\n\t\t\t\t\t\t\t\t\tloginStatus={this.state.loginStatus}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</div>\n\t\t\t\t</Navbar>\n\t\t\t\t\n\t\t\t\t<Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n\t\t\t\t\t<ModalHeader className=\"bg-primary text-white\"  toggle={this.toggleModal}>Login</ModalHeader>\n\t\t\t\t\t<ModalBody>\n\t\t\t\t\t\t<Form onSubmit={this.handleLogin}>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label htmlFor=\"username\">Webmail</Label>\n\t\t\t\t\t\t\t\t\t<Input onChange={this.handleChange} type=\"text\" id=\"username\" name=\"username\" innerRef={(input)=>this.username=input}/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<AlertCustom text={this.state.emailErr}/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label htmlFor=\"password\">Password</Label>\n\t\t\t\t\t\t\t\t\t<Input onChange={this.handleChange} type=\"password\" id=\"password\" name=\"password\" innerRef={(input)=>this.password=input}/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<AlertCustom text={this.state.passErr}/>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t\t<Button type=\"submit\" value=\"submit\" color=\"dark\" outline>Login</Button>\n\t\t\t\t\t\t\t<Button color=\"link\"  onClick={this.toggleModal}>\n\t\t\t\t\t\t\t\t <Link className=\"text-secondary\" to=\"/signup\">Signup</Link>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</ModalBody>\n\t\t\t\t</Modal>            \n\t\t\t<ToastContainer position=\"bottom-right\"/>\n            </React.Fragment>\n        );\n    }\n}\nexport default withRouter(Header);\n",["50","51"],"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/signup.js",["52","53","54","55","56","57"],"import React, {Component} from \"react\";\nimport {Button, Label, Col, Row} from \"reactstrap\";\nimport { Control, LocalForm, Errors } from \"react-redux-form\";\nimport ImageUploader from 'react-images-upload';\nimport { Alert } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\n\nconst uri = process.env.REACT_APP_URL;\n\nexport const AlertCustom = (props) => {    \n    if(props.text!==\"\"){\n        return (\n        <div>\n            <Alert color=\"danger\">\n                *{props.text}\n            </Alert>\n            </div>\n        );\n    }\n    else{\n        return(\n            <div/>\n        )\n    }\n  }\n\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length<=len);\nconst minLength = (len) => (val) => (val) && (val.length>=len);\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@iitp\\.ac\\.in$/i.test(val);\nconst passMatch = (Val) => (val) => (val) && (Val) && (val===Val);\n\nclass Signup extends Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            input:\"\",\n            user:{},\n            errors:\"\",\n            pictures:null\n        };\n        this.onDrop = this.onDrop.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);  \n        this.handleChange = this.handleChange.bind(this);      \n    }\n\n    handleChange(event){\n        let input=this.state.input;\n        input=event.target.value;\n        this.setState({\n            input:input,\n            errors:\"\"\n        });\n    }\n\n    handleSubmit(values) {\n        this.setState({errors:\"\"})\n        var data = new FormData();\n        for(var value of Object.entries(values)){\n            data.append(value[0], value[1])\n        }\n        if(this.state.pictures!=null) data.append('file', this.state.pictures[0])\n        else data.append('file', null)\n        data.append('college', \"IIT PATNA\")\n        data.append('size',Math.floor(Math.random() * (50 - 30 + 1) + 30))\n         \n        const requestOptions = {\n            method: 'POST',\n            body: data \n        };\n        fetch(uri+'/signup', requestOptions)\n            .then(response => {if(!response.ok){throw response} response.json()})\n            .then(data => {this.setState({user: data});toast.info(\"Verify your account via registered email\");\n            // setTimeout(() => {\n            //     this.props.history.push('/bubbles')\n            // }, 500);    \n        })\n            .catch(err =>{\n                err.text().then(errMsg=>\n                    {\n                        var error=JSON.parse(errMsg);\n                        this.setState({errors: error.error})\n                    })\n            })\n\n    }\n\n    onDrop(picture) {\n        this.setState({\n            pictures: picture\n        });\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                <div className=\"row row-content\">\n                    <div className=\"col-12 col-md-9\">\n                        <LocalForm onSubmit={(values)=>this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                            <Label htmlFor=\"name\" md={3}>Name <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\n                                        placeholder=\"Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".name\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'This is a required field, ',\n                                            minLength: 'Must be greater than 2 characters, ',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={3}>Webmail <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Webmail\"\n                                        className=\"form-control\"\n                                        onChange={this.handleChange}\n                                        validators={{\n                                            required, validEmail\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'This is a required field, ',\n                                            validEmail: 'Enter college webmail',\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"ml-auto\" md={9}>\n                                    <AlertCustom text={this.state.errors}/>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"password\" md={3}>Password <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                    <Control.text type=\"password\" model=\".password\" id=\"password\" name=\"password\"\n                                    className=\"form-control\"\n                                    placeholder=\"Password\"\n                                    onChange={this.handleChange}\n                                    validators={{\n                                        required, minLength: minLength(8)\n                                    }}/>\n                                    <Errors \n                                    className=\"text-danger\"\n                                    model=\".password\"\n                                    show=\"touched\"\n                                    messages={{\n                                        required: 'This is a required field, ',\n                                        minLength: 'Enter min 8 characters'\n                                    }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"re_password\" md={3}>Re-enter password <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                    <Control.text type=\"password\" model=\".re_password\" id=\"re_password\" name=\"re_password\"\n                                    className=\"form-control\"\n                                    placeholder=\"Password\"\n                                    validators={{\n                                        required, passMatch: passMatch(this.state.input)\n                                    }}/>\n                                    <Errors \n                                    className=\"text-danger\"\n                                    model=\".re_password\"\n                                    show=\"touched\"\n                                    messages={{\n                                        required: 'This is a required field, ',\n                                        passMatch: 'Passwords should match'\n                                    }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"branch\" md={3}>Branch <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                    <Control.select model=\".branch\" name =\"branch\" id=\"branch\" className=\"form-control\"\n                                    validators={{\n                                        required\n                                    }}>\n                                        <option/>\n                                        <option value=\"CS\">CS</option>\n                                        <option value=\"EE\">EE</option>\n                                        <option value=\"ME\">ME</option>\n                                        <option value=\"CE\">CE</option>\n                                        <option value=\"CB\">CB</option>\n                                    </Control.select>\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".branch\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'This is a required field'\n                                        }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"batch\" md={3}>Batch <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                <Control.select model=\".batch\" name =\"batch\" id=\"batch\" className=\"form-control\"\n                                validators={{required}}>\n                                    <option/>\n                                    <option value='2016'>2016</option>\n                                    <option value='2017'>2017</option>\n                                    <option value=\"2018\">2018</option>\n                                </Control.select> \n                                <Errors\n                                    className=\"text-danger\"\n                                    model=\".batch\"\n                                    show=\"touched\"\n                                    messages={{\n                                        required: 'This is a required field'\n                                    }}\n                                />      \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"image\" md={3}>Profile Photo <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                    <ImageUploader\n                                        withIcon={false}\n                                        buttonText='Choose image'\n                                        onChange={this.onDrop}\n                                        label=\"Max file size: 0.5mb, accepted: jpg\"\n                                        imgExtension={['.jpg']}\n                                        maxFileSize={524280}\n                                        singleImage={true}\n                                        withPreview={true}\n                                    />               \n                                </Col>\n                            </Row>                    \n                            <Row className=\"form-group\">\n                                <Button className=\"ml-2\" type=\"submit\" value=\"submit\" color=\"primary\">\n                                    Submit\n                                </Button>\n                            </Row>\n                        </LocalForm>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Signup;\n","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/Footer.jsx",["58","59"],"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/editUser.js",["60","61","62","63","64"],"import React, {Component} from \"react\";\nimport {Button, Label, Col, Row} from \"reactstrap\";\nimport { Control, LocalForm, Errors } from \"react-redux-form\";\nimport ImageUploader from 'react-images-upload';\nimport { Alert } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nvar store = require('store');\n\nconst uri = process.env.REACT_APP_URL;\n\nexport const AlertCustom = (props) => {  \n\n    if(props.text!==\"\"){\n        return (\n        <div>\n            <Alert color=\"danger\">\n                *{props.text}\n            </Alert>\n            </div>\n        );\n    }\n    else{\n        return(\n            <div/>\n        )\n    }\n  }\n\n\n\nconst maxLength = (len) => (val) => !(val) || (val.length<=len);\nconst minLength = (len) => (val) => !(val) || (val?val.length>=len:false);\nconst passMatch = (Val) => (val) => (Val)?((val) && (Val) && (val===Val)):true;\n\nclass Signup extends Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            input:\"\",\n            user:{},\n            errors:\"\",\n            pictures:null, \n        };\n        this.onDrop = this.onDrop.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);  \n        this.handleChange = this.handleChange.bind(this);      \n    }\n\n\n    componentDidMount(){\n        let userDetails=store.get('userDetails');\n        console.log(typeof userDetails.name)\n        setTimeout(()=>{\n            document.getElementById('name').value=userDetails.name;\n            document.getElementById('branch').value=userDetails.branch;\n            document.getElementById('batch').value=userDetails.batch;\n        })\n    }\n    handleChange(event){\n        let input=this.state.input;\n        input=event.target.value;\n        this.setState({\n            input:input,\n            errors:\"\"\n        });\n    }\n\n    handleSubmit(values) {\n        this.setState({errors:\"\"})\n        var data = new FormData();\n        for(var value of Object.entries(values)){\n            data.append(value[0], value[1])\n        }\n        if(this.state.pictures!=null) data.append('file', this.state.pictures[0])\n        else data.append('file', null)\n         \n        const requestOptions = {\n            method: 'POST',\n            credentials:'include',\n            body: data \n        };\n        fetch(uri+'/api/edit', requestOptions)\n            .then(response => {if(!response.ok){throw response} response.json()})\n            .then((data)=>{console.log(data);toast.success(\"Profile Updated\");\n            setTimeout(() => {\n                this.props.history.goBack();\n            }, 500);\n            fetch(uri+`/users/${store.get('userDetails')._id}`)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => store.set('userDetails', data));\n        }\n                \n            )\n            .catch(err =>{\n                err.text().then(errMsg=>\n                    {\n                        var error=JSON.parse(errMsg);\n                        toast.error(error.error)\n                    })\n            })\n\n    }\n\n    onDrop(picture) {\n        this.setState({\n            pictures: picture\n        });\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                <div className=\"row row-content\">\n                    <div className=\"col-12 col-md-9\">\n                        <LocalForm onSubmit={(values)=>this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                            <Label htmlFor=\"name\" md={3}>Name</Label>\n                                <Col md={9}>\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\n                                        placeholder=\"Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".name\"\n                                        show=\"touched\"\n                                        messages={{\n                                            minLength: 'Must be greater than 2 characters, ',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                           \n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"password\" md={3}>New-Password</Label>\n                                <Col md={9}>\n                                    <Control.text type=\"password\" model=\".password\" id=\"password\" name=\"password\"\n                                    className=\"form-control\"\n                                    placeholder=\"Password\"\n                                    onChange={this.handleChange}\n                                    validators={{\n                                         minLength: minLength(8)\n                                    }}/>\n                                    <Errors \n                                    className=\"text-danger\"\n                                    model=\".password\"\n                                    show=\"touched\"\n                                    messages={{\n                                        minLength: 'Enter min 8 characters'\n                                    }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"re_password\" md={3}>Re-enter password</Label>\n                                <Col md={9}>\n                                    <Control.text type=\"password\" model=\".re_password\" id=\"re_password\" name=\"re_password\"\n                                    className=\"form-control\"\n                                    placeholder=\"Password\"\n                                    validators={{\n                                        passMatch: passMatch(this.state.input)\n                                    }}/>\n                                    <Errors \n                                    className=\"text-danger\"\n                                    model=\".re_password\"\n                                    show=\"touched\"\n                                    messages={{\n                                        passMatch: 'Passwords should match'\n                                    }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"branch\" md={3}>Branch</Label>\n                                <Col md={9}>\n                                    <Control.select model=\".branch\" name =\"branch\" id=\"branch\" className=\"form-control\"\n                                    >\n                                        <option/>\n                                        <option value=\"CS\">CS</option>\n                                        <option value=\"EE\">EE</option>\n                                        <option value=\"ME\">ME</option>\n                                        <option value=\"CE\">CE</option>\n                                        <option value=\"CB\">CB</option>\n                                    </Control.select>\n                                   \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"batch\" md={3}>Batch</Label>\n                                <Col md={9}>\n                                <Control.select model=\".batch\" name =\"batch\" id=\"batch\" className=\"form-control\">\n                                    <option/>\n                                    <option value='2016'>2016</option>\n                                    <option value='2017'>2017</option>\n                                    <option value=\"2018\">2018</option>\n                                </Control.select> \n                                \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"image\" md={3}>Profile Photo <span className=\"text-danger\">*</span></Label>\n                                <Col md={9}>\n                                    <ImageUploader\n                                        withIcon={false}\n                                        buttonText='Choose image'\n                                        onChange={this.onDrop}\n                                        label=\"Max file size: 0.5mb, accepted: jpg\"\n                                        imgExtension={['.jpg']}\n                                        maxFileSize={524280}\n                                        singleImage={true}\n                                        withPreview={true}\n                                    />               \n                                </Col>\n                            </Row>                       \n                            <Row className=\"form-group\">\n                                <Button className=\"ml-2\" type=\"submit\" value=\"submit\" color=\"primary\">\n                                    Submit\n                                </Button>\n                            </Row>\n                        </LocalForm>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Signup;\n","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/screens/about.jsx",[],"/home/rachuyash/Desktop/farewell/farewell/Farewell/src/components/bubbles.jsx",["65","66","67","68","69","70","71","72"],"import isMobile from 'ismobilejs';\nimport { Button} from 'reactstrap';\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nconst uri = process.env.REACT_APP_URL;\n\nclass BarChart extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.myRef = React.createRef();\n\t}\n\t// definer() {\n\t// \tconst svg = d3.select(this.myRef.current);\n\t// \tvar defs = svg.append('defs');\n\t// \tdefs\n\t// \t\t// .selectAll('pattern')\n\t// \t\t// .data(bigga)\n\t// \t\t// .enter()\n\t// \t\t.append('pattern')\n\t// \t\t.attr('id', 'picture')\n\t// \t\t.attr('height', '100%')\n\t// \t\t.attr('width', '100%')\n\t// \t\t.attr('patterContentUnits', 'objectBoundingBox')\n\t// \t\t.append('image')\n\t// \t\t.attr('height', 1)\n\t// \t\t.attr('width', 1)\n\t// \t\t.attr('preserveAspectRatio', 'none')\n\t// \t\t.attr('xmlns', 'http://www.w3.org/2000/svg')\n\t// \t\t.attr('xmlns:href', require('../media/photos/anushree.jpg'));\n\t// }\n\tdrawChart(bigga) {\n\t\tconsole.log(process.env.REACT_APP_GA);\n\n\t\tconst height = window.innerHeight;\n\t\tconst width = window.innerWidth;\n\t\tvar forcedictX = { CE: width / 2, CS: width / 2, ME: width / 6, CB: width / 1.3, EE: width / 4.5 };\n\t\tvar forcedictY = { CE: height / 6, CS: height / 1.7, ME: height / 1.5, CB: height / 2, EE: height / 2.5 };\n\t\tvar colordict = { CE: '#c5aa84', CS: '#194b4f', ME: '#914529', CB: '#f26d7d', EE: '#d0343a' };\n\n\t\t// console.log(height);\n\n\t\tconst svg = d3.select(this.myRef.current);\n\t\tvar simulation = d3.forceSimulation().nodes(bigga);\n\t\tsimulation\n\t\t\t.force('charge_force', d3.forceManyBody().strength(200))\n\t\t\t.force('X', d3.forceX(width / 2))\n\t\t\t.force('Y', d3.forceY(height / 2))\n\t\t\t.force(\n\t\t\t\t'collide',\n\t\t\t\td3.forceCollide(function(d) {\n\t\t\t\t\treturn d.size + 7;\n\t\t\t\t})\n\t\t\t);\n\n\t\tvar zoom_handler = d3.zoom().on('zoom', zoom_actions);\n\t\tzoom_handler(svg);\n\t\tfunction zoom_actions(event) {\n\t\t\tnode.attr('transform', event.transform);\n\t\t\ttexts.attr('transform', event.transform);\n\t\t}\n\n\t\tvar node = svg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'nodes')\n\t\t\t.selectAll('circle')\n\t\t\t.data(bigga)\n\t\t\t.enter()\n\t\t\t.append('circle')\n\t\t\t.attr('r', (d) => d.size)\n\t\t\t.attr('fill', (d) => colordict[d.branch])\n\t\t\t.attr('stroke', 'white')\n\t\t\t.on('mouseover', function(d, i) {\n\t\t\t\td3.select(this).transition().attr('r', (d) => d.size + 5);\n\n\t\t\t\t// div.transition().duration(50).style('opacity', '1');\n\t\t\t})\n\t\t\t.on('mouseout', function(d, i) {\n\t\t\t\td3.select(this).transition().attr('r', (d) => d.size);\n\n\t\t\t\t// div.transition().duration(50).style('opacity', '0');\n\t\t\t});\n\t\tnode.attr('onclick', function(d) {\n\t\t\tvar link = \"window.top.location.href='\" + '/' + d._id + \"'\";\n\t\t\treturn link;\n\t\t});\n\t\t// var i;\n\t\t// for (i = 0; i < bigga.length; i++) {\n\t\t// \tif (bigga[i].brach == 'CE') {\n\t\t// \t\tnode.data(bigga[i]);\n\t\t// \t}\n\t\t// }\n\t\tvar texts = svg\n\t\t\t.append('g')\n\t\t\t.selectAll('text')\n\t\t\t.data(bigga)\n\t\t\t.enter()\n\t\t\t.append('text')\n\t\t\t.text((d) => d.name)\n\t\t\t.style('fill', 'white')\n\t\t\t.attr('opacity', function() {\n\t\t\t\tif (isMobile(window.navigator).phone || isMobile(window.navigator).tablet) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('mouseover', function(d, i) {\n\t\t\t\td3.select(this).transition().duration('10').attr('opacity', '1');\n\t\t\t\t// div.transition().duration(50).style('opacity', '1');\n\t\t\t})\n\t\t\t.on('mouseout', function(d, i) {\n\t\t\t\td3.select(this).transition().duration('2000').attr('opacity', '0');\n\t\t\t\t// div.transition().duration(50).style('opacity', '0');\n\t\t\t});\n\n\t\ttexts.attr('onclick', function(d) {\n\t\t\tvar link = \"window.top.location.href='\" + '/' + d._id + \"'\";\n\t\t\treturn link;\n\t\t});\n\t\tnode.append('title').text((d) => d.name).attr('opacity', '1');\n\t\tsimulation.on('tick', tickActions);\n\t\tfunction tickActions() {\n\t\t\ttexts.attr('x', (d) => d.x - d.name.length * 4);\n\t\t\ttexts.attr('y', (d) => d.y + 3);\n\t\t\tnode\n\t\t\t\t.attr('cx', function(d) {\n\t\t\t\t\treturn d.x;\n\t\t\t\t})\n\t\t\t\t.attr('cy', function(d) {\n\t\t\t\t\treturn d.y;\n\t\t\t\t});\n\t\t}\n\n\t\tvar drag_handler = d3.drag().on('start', drag_start).on('drag', drag_drag).on('end', drag_end);\n\t\tfunction drag_start(event) {\n\t\t\tif (!event.active) simulation.alphaTarget(0.3).restart();\n\t\t\tevent.subject.fx = event.x;\n\t\t\tevent.subject.fy = event.y;\n\t\t}\n\t\tfunction drag_drag(event) {\n\t\t\tevent.subject.fx = event.x;\n\t\t\tevent.subject.fy = event.y;\n\t\t}\n\n\t\tfunction drag_end(event) {\n\t\t\tif (d3.active) simulation.alphaTarget(0);\n\t\t\tevent.subject.fx = null;\n\t\t\tevent.subject.fy = null;\n\t\t}\n\t\tdrag_handler(node);\n\t\tdrag_handler(texts);\n\n\t\td3.select('#branchwise').on('click', function() {\n\t\t\tsimulation\n\t\t\t\t.force(\n\t\t\t\t\t'X',\n\t\t\t\t\td3\n\t\t\t\t\t\t.forceX(function(d) {\n\t\t\t\t\t\t\treturn forcedictX[d.branch];\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.strength(0.5)\n\t\t\t\t)\n\t\t\t\t.force(\n\t\t\t\t\t'Y',\n\t\t\t\t\td3\n\t\t\t\t\t\t.forceY(function(d) {\n\t\t\t\t\t\t\treturn forcedictY[d.branch];\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.strength(0.5)\n\t\t\t\t)\n\t\t\t\t.alphaTarget(0.5)\n\t\t\t\t.restart();\n\t\t});\n\t\td3.select('#normal').on('click', function(d) {\n\t\t\tsimulation.force('X', d3.forceX(width / 2)).force('Y', d3.forceY(height / 2)).alphaTarget(0.3).restart();\n\t\t});\n\n\t\t// const svg = d3.select('body').append('svg').attr('width', 700).attr('height', 300);\n\t}\n\tcomponentDidMount() {\n\t\t// this.definer();\n\n\t\tfetch(uri+'/users?batch=2017&college=IIT PATNA')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((seniors) => this.drawChart(seniors.users));\n\n\t}\n\tsvgHeight = window.innerHeight - 100;\n\trender() {\n\t\treturn (\n\t\t\t<div class={'patterner'}>\n\t\t\t\t<div style={{ background: 'black', 'text-align': 'center' }}>\n\t\t\t\t\t<Button id={'branchwise'} style={{ margin: '8px' }}>\n\t\t\t\t\t\tBranchwise\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button id={'normal'} style={{ margin: '8px' }}>\n\t\t\t\t\t\tNormal\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\n\t\t\t\t<svg\n\t\t\t\t\tref={this.myRef}\n\t\t\t\t\tstyle={{ width: window.innerWidth, height: this.svgHeight, background: 'black' }}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default BarChart;\n","/home/rachuyash/Desktop/farewell/farewell/Farewell/src/screens/profilePage.js",["73","74"],{"ruleId":"75","severity":1,"message":"76","line":19,"column":37,"nodeType":"77","messageId":"78","endLine":19,"endColumn":47},{"ruleId":"79","severity":1,"message":"80","line":98,"column":120,"nodeType":"81","messageId":"82","endLine":98,"endColumn":122},{"ruleId":"79","severity":1,"message":"80","line":119,"column":40,"nodeType":"81","messageId":"82","endLine":119,"endColumn":42},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":101,"column":37,"nodeType":"89","endLine":107,"endColumn":44},{"ruleId":"87","severity":1,"message":"88","line":123,"column":37,"nodeType":"89","endLine":130,"endColumn":44},{"ruleId":"87","severity":1,"message":"88","line":150,"column":37,"nodeType":"89","endLine":156,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":171,"column":37,"nodeType":"89","endLine":176,"endColumn":41},{"ruleId":"87","severity":1,"message":"90","line":191,"column":37,"nodeType":"89","endLine":194,"endColumn":40},{"ruleId":"87","severity":1,"message":"90","line":215,"column":33,"nodeType":"89","endLine":216,"endColumn":57},{"ruleId":"91","severity":1,"message":"92","line":4,"column":1,"nodeType":"93","endLine":14,"endColumn":2},{"ruleId":"94","severity":1,"message":"95","line":9,"column":6,"nodeType":"89","endLine":9,"endColumn":82},{"ruleId":"87","severity":1,"message":"88","line":113,"column":37,"nodeType":"89","endLine":119,"endColumn":44},{"ruleId":"87","severity":1,"message":"88","line":135,"column":37,"nodeType":"89","endLine":141,"endColumn":41},{"ruleId":"87","severity":1,"message":"88","line":155,"column":37,"nodeType":"89","endLine":160,"endColumn":41},{"ruleId":"87","severity":1,"message":"90","line":174,"column":37,"nodeType":"89","endLine":175,"endColumn":38},{"ruleId":"87","severity":1,"message":"90","line":189,"column":33,"nodeType":"89","endLine":189,"endColumn":114},{"ruleId":"75","severity":1,"message":"96","line":2,"column":18,"nodeType":"77","messageId":"78","endLine":2,"endColumn":29},{"ruleId":"75","severity":1,"message":"97","line":3,"column":28,"nodeType":"77","messageId":"78","endLine":3,"endColumn":36},{"ruleId":"75","severity":1,"message":"98","line":3,"column":38,"nodeType":"77","messageId":"78","endLine":3,"endColumn":47},{"ruleId":"75","severity":1,"message":"99","line":4,"column":10,"nodeType":"77","messageId":"78","endLine":4,"endColumn":14},{"ruleId":"75","severity":1,"message":"100","line":6,"column":8,"nodeType":"77","messageId":"78","endLine":6,"endColumn":13},{"ruleId":"75","severity":1,"message":"101","line":7,"column":8,"nodeType":"77","messageId":"78","endLine":7,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":85,"column":44,"nodeType":"104","messageId":"105","endLine":85,"endColumn":45},{"ruleId":"102","severity":1,"message":"103","line":119,"column":44,"nodeType":"104","messageId":"105","endLine":119,"endColumn":45},{"ruleId":"87","severity":1,"message":"106","line":53,"column":6,"nodeType":"89","endLine":59,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":89,"column":31,"nodeType":"81","messageId":"82","endLine":89,"endColumn":33},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-native-reassign",["107"],"no-negated-in-lhs",["108"],"react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'ButtonGroup' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'axios' is defined but never used.","'photo' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]